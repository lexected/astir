// Test10 - a context-free grammar LL(1) parser test
// This time, the parser 'uses' finite automaton that does the tokenizing, referring to it whenever a token is needed

finite automaton TreeTokenizer {
    ignored root WhiteSpace = [' ' '\n' '\r' '\t']+;
    root PAR_LEFT = '(';
    root PAR_RIGHT = ')';
    root LEAF = ['a'-'z' 'A'-'Z' '_' '0' - '9']+;
}

LL(2) parser TreeParser with ambiguity_resolved_by_precedence on TreeTokenizer {
    root category Node;

    production EmptyNode : Node {
        flag isReallyEmpty;
    } = PAR_LEFT ()@flag:isReallyEmpty PAR_RIGHT;

    production BranchingNode : Node {
        Node list nodes;
    } = PAR_LEFT (Node@push:nodes)+ PAR_RIGHT;

    production Leaf : Node {
        raw text;
    } = LEAF@capture:text;
}