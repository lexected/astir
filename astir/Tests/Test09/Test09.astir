// Test09 - a context-free grammar LL(2) parser test
// This time, the parser is fed the outputs of a finite automaton that does the tokenizing

finite automaton TreeTokenizer {
    ignored root WhiteSpace = [' ' '\n' '\r' '\t']+;
    root PAR_LEFT = '(';
    root PAR_RIGHT = ')';
    root LEAF = ['a'-'z' 'A'-'Z' '_' '0' - '9']+;
}

LL(2) parser TreeParser with ambiguity_resolved_by_precedence on TreeTokenizer {
    root category Node;

    production EmptyNode : Node = PAR_LEFT PAR_RIGHT;
    production BranchingNode : Node = PAR_LEFT Node+ PAR_RIGHT;
    production Leaf : Node = LEAF;
}